{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/tutorials/12-index",
    "result": {"data":{"site":{"siteMetadata":{"title":"mimik Developer Portal | mimik","docsLocation":"https://bitbucket.org/mimiktech/dev-portal-content/src/develop/content/"}},"mdx":{"fields":{"id":"ba4d25fc-2efe-5b56-88d5-32f9dbe67f1b","title":"Working with edgeEngine in an iOS project","slug":"/tutorials/12-index"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Working with edgeEngine in an iOS project\",\n  \"metaTitle\": \"Working with edgeEngine in an iOS project\",\n  \"metaDescription\": \"Working with edgeEngine in an iOS project\",\n  \"seo\": \"mimik, edge, edgeEngine, tutorial, microservice, deploy, deployment, iOS, iPadOS, iPhone\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Objective\"), mdx(\"p\", null, \"The objective of this article is to demonstrate how to use the mimik Client Library interfaces when working with the edgeEngine Runtime in an iOS project.\"), mdx(\"h1\", null, \"Intended Readers\"), mdx(\"p\", null, \"The intended readers of this document are iOS software developers, who want to familiarize themselves with the basics of mimik Client Library interfaces, specifically methods for interfacing with the edgeEngine Runtime.\"), mdx(\"h1\", null, \"What You'll Be Doing\"), mdx(\"p\", null, \"In this tutorial you'll be covering the following topics that are relevant to using the mimik Client Library edgeEngine interfaces:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Starting edgeEngine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stopping edgeEngine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creating an Access Token\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Retrieving Runtime Information\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Resetting edgeEngine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lifecycle  Management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Working with an iOS Simulator\")), mdx(\"h1\", null, \"Technical Prerequisites\"), mdx(\"p\", null, \"This article has the following technical prerequisites:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A device running the latest iOS version.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A familiarity with working with mimik Client Library components as described in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../../key-concepts/09-index\"\n  }, \"this Key Concepts article\"), \".\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), \" \", mdx(\"br\", null), mdx(\"br\", null), \"Working with the iOS Simulator and the mimik Client Libraries entails some special consideration. For more more information about iOS Simulator support see \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"../tutorials/12-index#workingwithaniossimulator\"\n  }, \"this tutorial\"), \".\")))), mdx(\"h1\", null, \"Starting edgeEngine\"), mdx(\"p\", null, \"Once the mimik Client Library components have been Integrated and initialized into your project, we can get into the specifics of working with the edgeEngine Runtime.\"), mdx(\"p\", null, \"You can think of edgeEngine as a host platform where edge microservices are deployed to. Also, edgeEngine provides \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" interfaces to the iOS application in order to do various tasks.\"), mdx(\"p\", null, \"One prerequisite for being able to call the edge microservice interfaces is that the edgeEngine needs to be in a running state. The code example below in Listing 1 shows you how to do this. An explanation of the code follows.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"func startEdgeEngine() async -> Result<Bool, NSError> {\\n    // edgeEngine license from mimik Developer Portal\\n    let edgeEngineLicense = <EDGE_ENGINE_LICENSE>\\n\\n    // Use the MIMIKStartupParameters object to configure the edgeEngine Runtime startup behavior\\n    let startupParameters = MIMIKStartupParameters(license: edgeEngineLicense)\\n\\n    // Calling mimik Client Library Engine component\\n    switch await self.edgeEngine.startEdgeEngine(startupParameters: startupParameters) {\\n    case .success:\\n        print(\\\"Success starting edgeEngine\\\")\\n        // Startup was successful, returning success\\n        return .success(true)\\n    case .failure(let error):\\n        print(\\\"Error starting edgeEngine\\\", error.localizedDescription)\\n        // Startup was unsuccessful, returning error\\n        return .failure(error)\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 1: Starting edgeEngine\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we get our edgeEngine license from mimik Developer Portal and set the value at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 3\"), \". (The article \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./02-index\"\n  }, \"Working with edgeEngine in an iOS project\"), \" provides the details about obtaining an edgeEngine license.)\"), mdx(\"p\", null, \"Next, we set the edgeEngine Runtime configuration object at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 6\"), \" by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKStartupParameters(license: edgeEngineLicense)\"), \". There are additional startup parameters available, but for the purpose of this article, only the license parameter will be used.\"), mdx(\"p\", null, \"Then, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startEdgeEngine()\"), \" method of the mimik Client Library Engine component at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 9\"), \", which requires a value for the parameter named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startupParameters\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startupParameters\"), \"is the configuration object we set at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 6\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"To learn more about the edgeEngine configuration parameters, see the \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"MIMIKStartupParameters\"), \" class in the code documentation.\")))), mdx(\"p\", null, \"After the call, we validate the result.\"), mdx(\"p\", null, \"If the edgeEngine startup is successful, we return a success at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 13\"), \".\"), mdx(\"p\", null, \"If there is an issue, we return an error at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 17\"), \".\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Repeat \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"startEdgeEngine()\"), \" calls have no further effect. Learn more about managing the edgeEngine lifecycle in the section titled \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"#lifecyclemanagement\"\n  }, \"Lifecycle Management\"), \" Management below\")))), mdx(\"p\", null, \"[EDITOR: What was the intention of ** next to Management above?]\"), mdx(\"h1\", null, \"Stopping edgeEngine\"), mdx(\"p\", null, \"Sometimes developers want to shut the edgeEngine Runtime down manually. For example, when a developer opts out from the automatic lifecycle management, or when the user wants to clear out all their data after a logout. The code example below shows you how to do this.\"), mdx(\"p\", null, \"We call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stopEdgeEngine()\"), \" method of the mimik Client Library Engine component and that's it. There are no values returned, nor there is a need to do any validation. Once the library method returns, the edgeEngine is no longer in a running state.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"func stopEdgeEngine() async {\\n    // Calling mimik Client Library Engine component\\n    self.edgeEngine.stopEdgeEngine()\\n}\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Due to the nature of the edgeEngine shutdown process, this call blocks the main thread for its duration. Repeat \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"stopEdgeEngine()\"), \" calls have no further effect. Learn more about managing the edgeEngine lifecycle in the section \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"#lifecyclemanagement\"\n  }, \"Lifecycle Management\"), \" below.\")))), mdx(\"h1\", null, \"Creating an Access Token\"), mdx(\"p\", null, \"Most of the edgeEngine Runtime functions require an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Token\"), \" for their operations. The Access Token is based on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"developer ID Token\"), \" generated at the mimik Developer Portal. The code example below in Listing 2 shows you how to do this.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"func authenticateEdgeEngine() async -> Result<String, NSError> {\\n    // Developer ID Token from mimik Developer Portal\\n    let developerIdToken = <DEVELOPER_ID_TOKEN>\\n    \\n    // Calling mimik Client Library method to get the Access Token for edgeEngine access\\n    switch await self.edgeClient.authenticateDeveloperAccess(developerIdToken: developerIdToken) {\\n    case .success(let authorization):\\n        \\n        // Authentication was unsuccessful, returning error\\n        guard let accessToken = authorization.userAccessToken() else {\\n            // Authentication was unsuccessful, returning error\\n            return .failure(NSError.init(domain: \\\"Error\\\", code: 500))\\n        }\\n        \\n        print(\\\"Success. Access Token:\\\", accessToken)\\n        // Authentication was successful, returning Access Token\\n        return .success(accessToken)\\n    case .failure(let error):\\n        print(\\\"Error\\\", error.localizedDescription)\\n        // Authentication was unsuccessful, returning error\\n        return .failure(error)\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 2: Authenticating to edgeEngine\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we get our developer ID Token from mimik Developer Portal and set the value at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 3\"), \". (For more information about the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Developer ID Token\"), \" read the section, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Getting the developer ID Token and client ID from mimik Developer Portal\"), \" in the tutorial \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./02-index/\"\n  }, \"Getting the edgeEngine license and Identity server values from mimik Developer Portal\"), \".)\"), mdx(\"p\", null, \"Next, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"authenticateDeveloperAccess()\"), \" method of the mimik Client Library Engine component at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 6\"), \", which requires the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"developerIdToken\"), \" parameter\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"developerIdToken\"), \" is the developer ID Token we set at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 3\"), \" in Listing 2 above.\"), mdx(\"p\", null, \"After the call is made, we validate the result by attempting to extract the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Token\"), \" from the authorization at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 10\"), \". If successful, we print and return the Access Token at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 15 and 17\"), \".\"), mdx(\"p\", null, \"If there is an issue, we return an error at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 12 or 21\"), \".\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"This authentication method is meant for developer access only. For enterprise solutions, including user access tokens for backend access, contact \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"https://mimik.com/mimikcontact/\"\n  }, \"mimik support\"))))), mdx(\"h1\", null, \"Retrieving Runtime Information\"), mdx(\"p\", null, \"Sometimes developers need to find out more details about the edgeEngine Runtime system information, such as its version, account or node information. The code example in Listing 3 below shows you how to do this. An explanation follows.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// The async return is either a success with a JSON object containing edgeEngine Runtime information values, or a failure with an error.\\nfunc edgeEngineInfo() async -> Result<Any, NSError> {\\n    // Calling mimik Client Library Engine component\\n    switch await self.edgeClient.edgeEngineInfo() {\\n    case .success(let info):\\n        print(\\\"Success\\\", info)\\n        // Success getting edgeEngine Runtime information, returning the value\\n        return .success(info)\\n    case .failure(let error):\\n        // There was an issue, returning the error\\n        print(\\\"Error\\\", error.localizedDescription)\\n        return .failure(error)\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 3: Getting information about edgeEngine at runtime\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeEngineInfo()\"), \" method of the mimik Client Library Engine component on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 4\"), \".\"), mdx(\"p\", null, \"After the call, we validate the result at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-13\"), \".\"), mdx(\"p\", null, \"If edgeEngine information is received, we return a success at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 8\"), \".\"), mdx(\"p\", null, \"If there is an issue, we return an error at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 12\"), \".\"), mdx(\"p\", null, \"An asynchronous call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self.edgeClient.edgeEngineInfo()\"), \" as shown at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 4\"), \" in Listing 3 above returns an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info\"), \" object. The information return in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info\"), \" object is similar to the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"hide_line_numbers\",\n    \"hide_line_numbers\": true\n  }, \"{\\n  \\\"supernodeTypeName\\\" : \\\"_mk-v15-4247._tcp\\\",\\n  \\\"nodeId\\\" : \\\"1234567890\\\",\\n  \\\"accountId\\\" : \\\"1234567890\\\",\\n  \\\"version\\\" : \\\"vX.Y.Z\\\",\\n  \\\"linkLocalIp\\\" : \\\"192.168.1.47\\\"\\n}\\n\")), mdx(\"h1\", null, \"Resetting edgeEngine\"), mdx(\"p\", null, \"When it comes to clearing out user data, developers need to shut down the edgeEngine Runtime and then erase all content stored in its working directory. The code example in Listing 4 below shows you how to do this with one call. An explanation follows.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// Return is the result of the erase call\\nfunc resetEdgeEngine() async -> Bool {\\n    // Calling mimik Client Library Engine component\\n    switch self.edgeEngine.resetEdgeEngine() {\\n    case true:\\n        print(\\\"Success\\\")\\n        // Reset is successful, returning success\\n        return true\\n    case false:\\n        print(\\\"Error\\\")\\n        // Reset is unsuccessful, returning error\\n        return false\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 4: Resetting edgeEngine\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resetEdgeEngine()\"), \" method of the mimik Client Library Engine component on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 4\"), \".\"), mdx(\"p\", null, \"After the call, we validate the result at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-13\"), \".\"), mdx(\"p\", null, \"If edgeEngine reset is successful, we return true at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 8\"), \".\"), mdx(\"p\", null, \"If there is an issue, we return false at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 12\"), \".\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Once edgeEngine has been reset, all deployed edge microservice stop functioning, with all their data erased as well.\")))), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Due to the nature of the edgeEngine shutdown process, this call blocks the main thread for its duration. Learn more about managing the edgeEngine lifecycle in the section that follows.\")))), mdx(\"h1\", null, \"Lifecycle Management\"), mdx(\"p\", null, \"When developers initialize the mimik Client Library Engine component, they opt-in to an automatic edgeEngine Runtime Lifecycle management by default. This means that the mimik Client Library will be monitoring application lifecycle notifications, and reacting to any significant changes that affect edgeEngine's ability to perform its functions.\"), mdx(\"p\", null, \"For example, when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"protectedDataWillBecomeUnavailableNotification\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"willTerminateNotification\"), \" system notifications are received, edgeEngine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stop\"), \" is called. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"protectedDataDidBecomeAvailableNotification\"), \" system notification is received, edgeEngine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" is called.\"), mdx(\"p\", null, \"Developers can opt-out of this automatic lifecycle management during the mimik Client Library Engine component initialization, by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"manageRuntime\"), \" parameter to false; for example, when they prefer to start and stop the edgeEngine Runtime manually.\"), mdx(\"p\", null, \"The code example below shows you how to activate the automatic edgeEngine Runtime Lifecycle management:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"hide_line_numbers\",\n    \"hide_line_numbers\": true\n  }, \"let edgeEngine: MIMIKEdgeClientEdgeEngine = {\\n    guard let mimikEdgeEngine = MIMIKEdgeClientEdgeEngine() else {\\n        fatalError(\\\"Error\\\")\\n    }\\n    return mimikEdgeEngine\\n}()\\n\")), mdx(\"p\", null, \"This code example shows you how to deactivate the automatic edgeEngine Runtime Lifecycle management:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"hide_line_numbers\",\n    \"hide_line_numbers\": true\n  }, \"let edgeEngine: MIMIKEdgeClientEdgeEngine = {\\n    guard let mimikEdgeEngine = MIMIKEdgeClientEdgeEngine(manageRuntime: false) else {\\n        fatalError(\\\"Error\\\")\\n    }\\n    return mimikEdgeEngine\\n}()\\n\")), mdx(\"p\", null, \"Finally, this code example code shows you how to determine whether the mimik Client Library is currently managing the edgeEngine Runtime Lifecycle:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"hide_line_numbers\",\n    \"hide_line_numbers\": true\n  }, \"// Returns whether the edgeEngine Runtime Lifecycle is being managed by the mimik Client Library\\nfunc edgeEngineRuntimeIsManaged() -> Bool {\\n    // Calling mimik Client Library Engine component\\n    switch self.edgeEngine.edgeEngineRuntimeIsManaged() {\\n    case true:\\n        print(\\\"Success\\\")\\n        // edgeEngine Runtime Lifecycle is being managed by the mimik Client Library, returning true\\n        return true\\n    case false:\\n        print(\\\"Error\\\")\\n        // edgeEngine Runtime Lifecycle is not being managed by the mimik Client Library, returning false\\n        return false\\n    }\\n}\\n\")), mdx(\"h1\", null, \"Working with an iOS Simulator\"), mdx(\"p\", null, \"Normally, developers intend to run their applications on iOS devices where the mimik Client Library Engine is used to facilitate the integration of the edgeEngine Runtime binary directly within the iOS application sandbox. This is done by vendoring the edgeEngine binary inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientEngine\"), \" pod component. \"), mdx(\"p\", null, \"However, the inclusion of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientEngine\"), \" pod component in the iOS project prevents developers from being able to compile their project for the iOS Simulator or Mac Catalyst environments. This is because edgeEngine is a binary compiled specifically for iOS devices.\"), mdx(\"p\", null, \"In order to remedy this, the mimik Client Library is split into its Core \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientCore\"), \" and Engine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientEngine\"), \" pod components. This gives developers the choice of having the edgeEngine bundled in within the iOS application or having it running on a host platform of their choice (e.g., macOS, Linux, Windows, etc...)\"), mdx(\"p\", null, \"So to summarize. When compiling for an iOS device, include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientEngine\"), \" pod component in your project and use edgeEngine internally. When compiling for an iOS Simulator or Mac Catalyst environments, don't include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientEngine\"), \" pod component in your project. Instead, run edgeEngine on an external platform, and activate edgeEngine external support in the mimik Client Library.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Download edgeEngine release binaries for various platforms \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"https://github.com/edgeEngine\"\n  }, \"here\"), \".\")))), mdx(\"p\", null, \"The code example below shows you how you can conditionally include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientEngine\"), \" pod component, using two different targets.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"hide_line_numbers\",\n    \"hide_line_numbers\": true\n  }, \"target 'internal-edgeEngine-target' do\\n  pod 'MIMIKEdgeClientCore'\\n  pod 'MIMIKEdgeClientEngine'\\nend\\n\\ntarget 'external-edgeEngine-target' do\\n  pod 'MIMIKEdgeClientCore'\\nend\\n\")), mdx(\"p\", null, \"The code example below shows you how you can conditionally import \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKEdgeClientEngine\"), \" into your class using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EXTERNAL\"), \" compiler flag.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"hide_line_numbers\",\n    \"hide_line_numbers\": true\n  }, \"import MIMIKEdgeClientCore\\n#if !EXTERNAL\\nimport MIMIKEdgeClientEngine\\n#endif\\n\")), mdx(\"p\", null, \"Next, let's assume we want to have edgeEngine running externally, for example on a macOS host, with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"192.168.4.118\"), \" IP address and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8083\"), \" port number. \"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Learn how to run edgeEngine on macOS \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"https://github.com/edgeEngine/edgeEngine-SE-macOS\"\n  }, \"here\"))))), mdx(\"p\", null, \"Once the edgeEngine is running externally on macOS, we can activate the external edgeEngine support in the mimik Client Library, by calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"activateExternalEdgeEngine()\"), \" method.\"), mdx(\"p\", null, \"The code example below shows you how to do this.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\",\n    \"metastring\": \"hide_line_numbers\",\n    \"hide_line_numbers\": true\n  }, \"func activateExternalEdgeEngine() -> Result<URLComponents, NSError> {\\n    \\n    switch MIMIKEdgeClient.activateExternalEdgeEngine(host: \\\"192.168.4.118\\\", port: 8083) {\\n    case .success(let urlComponents):\\n        print(\\\"Success. urlComponents:\\\", urlComponents)\\n        return .success(urlComponents)\\n    case .failure(let error):\\n        print(\\\"Error\\\", error.localizedDescription)\\n        return .failure(error)\\n    }\\n}\\n\")), mdx(\"p\", null, \"You can continue using your application and mimik Client Library normally, keeping in mind that the edgeEngine Runtime is now running externally on a host system. As a result, your iOS application doesn't have any control over its lifecycle.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#objective","title":"Objective"},{"url":"#intended-readers","title":"Intended Readers"},{"url":"#what-youll-be-doing","title":"What You'll Be Doing"},{"url":"#technical-prerequisites","title":"Technical Prerequisites"},{"url":"#starting-edgeengine","title":"Starting edgeEngine"},{"url":"#stopping-edgeengine","title":"Stopping edgeEngine"},{"url":"#creating-an-access-token","title":"Creating an Access Token"},{"url":"#retrieving-runtime-information","title":"Retrieving Runtime Information"},{"url":"#resetting-edgeengine","title":"Resetting edgeEngine"},{"url":"#lifecycle-management","title":"Lifecycle Management"},{"url":"#working-with-an-ios-simulator","title":"Working with an iOS Simulator"}]},"parent":{"relativePath":"tutorials/12-index.md"},"frontmatter":{"metaTitle":"Working with edgeEngine in an iOS project","metaDescription":"Working with edgeEngine in an iOS project"}},"allMdx":{"edges":[{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":{"slug":"/","title":"Welcome to the mimik Developer Documentation"}}},{"node":{"fields":{"slug":"/faqs","title":"FAQs"}}},{"node":{"fields":{"slug":"/api","title":"mimik Object Models, Tools and APIs Reference"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction to edgeEngine"}}},{"node":{"fields":{"slug":"/key-concepts","title":"Key Concepts"}}},{"node":{"fields":{"slug":"/misc","title":"Privacy Policy and Disclaimer"}}},{"node":{"fields":{"slug":"/search-result","title":"Search result for"}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting Questions"}}},{"node":{"fields":{"slug":"/api/02-index","title":"Node Discovery API Reference"}}},{"node":{"fields":{"slug":"/api/03-index","title":"mDebug API Reference"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/api/01-index","title":"Command Line Tool Reference"}}},{"node":{"fields":{"slug":"/api/04-index","title":"JSON RPC API Reference"}}},{"node":{"fields":{"slug":"/api/05-index","title":"mimik Identity Server API Reference"}}},{"node":{"fields":{"slug":"/faqs/01-faqs","title":"FAQs: Hybrid edgeCloud Platform"}}},{"node":{"fields":{"slug":"/faqs/02-faqs","title":"FAQs: mimik Technology"}}},{"node":{"fields":{"slug":"/faqs/03-faqs","title":"FAQs: mimik Deployment and Integration"}}},{"node":{"fields":{"slug":"/faqs/06-faqs","title":"FAQs: edgeEngine Security"}}},{"node":{"fields":{"slug":"/faqs/04-faqs","title":"FAQs: edgeEngine JavaScript Serverless"}}},{"node":{"fields":{"slug":"/faqs/05-faqs","title":"FAQs: edgeEngine Device Connectivity"}}},{"node":{"fields":{"slug":"/introduction/01-index","title":"What Does the edgeEngine Runtime Do?"}}},{"node":{"fields":{"slug":"/introduction/02-index","title":"What Problem Does edgeEngine Solve?"}}},{"node":{"fields":{"slug":"/faqs/07-faqs","title":"FAQs: mimik Network Topology"}}},{"node":{"fields":{"slug":"/introduction/03-index","title":"How Does the edgeEngine Runtime Work?"}}},{"node":{"fields":{"slug":"/introduction/04-index","title":"What Does edgeEngine Service Mesh Do?"}}},{"node":{"fields":{"slug":"/introduction/05-index","title":"What Problem Does the edgeEngine Service Mesh Solve?"}}},{"node":{"fields":{"slug":"/introduction/06-index","title":"How Does edgeEngine Service Mesh Work?"}}},{"node":{"fields":{"slug":"/faqs/09-faqs","title":"FAQs: edgeEngine memory & CPU usage"}}},{"node":{"fields":{"slug":"/faqs/08-faqs","title":"FAQs: edgeEngine Network Configuration"}}},{"node":{"fields":{"slug":"/key-concepts/01-index","title":"Understanding the Fundamentals of the edgeEngine Runtime"}}},{"node":{"fields":{"slug":"/key-concepts/02-index","title":"Understanding edgeEngine Images and edgeEngine Containers"}}},{"node":{"fields":{"slug":"/key-concepts/03-index","title":"Understanding edgeEngine Tokens"}}},{"node":{"fields":{"slug":"/key-concepts/04-index","title":"Understanding the Strategies for Deploying an edge Microservice"}}},{"node":{"fields":{"slug":"/key-concepts/07-index","title":"Understanding the edgeEngine Security Framework"}}},{"node":{"fields":{"slug":"/key-concepts/08-index","title":"Understanding edgeEngine Data Management"}}},{"node":{"fields":{"slug":"/key-concepts/09-index","title":"Understanding the mimik Client Library for iOS"}}},{"node":{"fields":{"slug":"/key-concepts/05-index","title":"Understanding the edgeEngine Context Object"}}},{"node":{"fields":{"slug":"/misc/01-index","title":"mimik Technology Disclaimer and Terms of Use Policy"}}},{"node":{"fields":{"slug":"/misc/02-index","title":"mimik Technology Incorporated Privacy Policy"}}},{"node":{"fields":{"slug":"/key-concepts/10-index","title":"Understanding How to Integrate the mimik Client Library into Android Applications"}}},{"node":{"fields":{"slug":"/key-concepts/11-index","title":"Working with edgeEngine and WebAssembly"}}},{"node":{"fields":{"slug":"/tutorials/02-index","title":"Getting the edgeEngine license and Identity server values from mimik Developer Portal"}}},{"node":{"fields":{"slug":"/tutorials/03-index","title":"Installing edgeEngine and the mimik-edge-cli Tool on a Linux System or MacOS"}}},{"node":{"fields":{"slug":"/tutorials/04-index","title":"Using the mimik-edge-cli Tool to Get An Access Token"}}},{"node":{"fields":{"slug":"/tutorials/06-index","title":"Creating an edge Microservice using WebAssembly"}}},{"node":{"fields":{"slug":"/tutorials/08-index","title":"Creating a Secure Network Connection using mimik Tunneling Technology"}}},{"node":{"fields":{"slug":"/tutorials/01-index","title":"QuickStart"}}},{"node":{"fields":{"slug":"/tutorials/05-index","title":"Getting edgeEngine Up and Running on Raspberry Pi"}}},{"node":{"fields":{"slug":"/tutorials/07-index","title":"Getting Up and Running with mDebug"}}},{"node":{"fields":{"slug":"/tutorials/12-index","title":"Working with edgeEngine in an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/11-index","title":"Integrating the mimik Client Library into an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/13-index","title":"Working with edge microservices in an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/10-index","title":"Creating a Simple iOS Application that Uses an edge microservice"}}},{"node":{"fields":{"slug":"/tutorials/09-index","title":"Creating a Simple Android Application that Uses an edge microservice"}}},{"node":{"fields":{"slug":"/key-concepts/06-index","title":"Understanding the edgeEngine Service Mesh"}}}]}},"pageContext":{"id":"ba4d25fc-2efe-5b56-88d5-32f9dbe67f1b"}},
    "staticQueryHashes": ["2619113677","320950771","3706406642","417421954"]}
{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/tutorials/13-index",
    "result": {"data":{"site":{"siteMetadata":{"title":"mimik Developer Portal | mimik","docsLocation":"https://bitbucket.org/mimiktech/dev-portal-content/src/develop/content/"}},"mdx":{"fields":{"id":"00b8533d-304e-563a-9530-01966f18f261","title":"Working with edge microservices in an iOS project","slug":"/tutorials/13-index"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Working with edge microservices in an iOS project\",\n  \"metaTitle\": \"Working with edge microservices in an iOS project\",\n  \"metaDescription\": \"Working with edge microservices in an iOS project\",\n  \"seo\": \"mimik, edge, edgeEngine, tutorial, microservice, deploy, deployment, iOS, iPadOS, iPhone\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Objective\"), mdx(\"p\", null, \"The objective of this article is to demonstrate how to use the mimik Client Library interfaces when working with edge microservices in an iOS project.\"), mdx(\"h1\", null, \"Intended Readers\"), mdx(\"p\", null, \"The intended readers of this document are iOS software developers, who want to familiarize themselves with the basics of mimik Client Library interfaces, specifically methods for interfacing with edge microservices.\"), mdx(\"h1\", null, \"What You'll Be Doing\"), mdx(\"p\", null, \"In this tutorial you are going to learn about topics relevant to working with the mimik Client Library edge microservice interfaces. These topics are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deploying an edge Microservice\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Referencing an edge Microservice\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Calling an edge Microservice\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Updating an edge Microservice\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Undeploying an edge Microservice\")), mdx(\"h1\", null, \"Technical Prerequisites\"), mdx(\"p\", null, \"In order to get full benefit from this article, the reader should have a working knowledge of the following concepts and techniques:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running an iOS device with the latest version of the operating system.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An understanding of how to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../tutorials/11-index\"\n  }, \"Integrate and initialize\"), \" mimik Client Library components.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An understanding of how to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../tutorials/12-index#startingedgeengine\"\n  }, \"start\"), \" the edgeEngine Runtime in an iOS application.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An understanding of how to generate an edgeEngine \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../tutorials/12-index#creatinganaccesstoken\"\n  }, \"Access Token\"), \".\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), \" \", mdx(\"br\", null), mdx(\"br\", null), \"Working with the iOS Simulator and the mimik Client Libraries entails some special consideration. For more more information about iOS Simulator support see \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"../tutorials/12-index#workingwithaniossimulator\"\n  }, \"this tutorial\"), \".\")))), mdx(\"h1\", null, \"Deploying an edge Microservice\"), mdx(\"p\", null, \"Once the mimik Client Library components have been integrated and initialized into your project as well as having the edgeEngine Runtime started and Access Token generated, we can get into the specifics of working with edge microservices.\"), mdx(\"p\", null, \"You can think of deploying (installing) edge microservices as spinning up individual mini backends within your application. The code example shown below in Listing 1 shows how to do this. A detailed explanation follows.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// A valid edgeEngine Access Token is required to call this method. The async return is either a success with an object reference to the deployed edge microservice, or a failure with an error.\\nfunc deployMicroservice(edgeEngineAccessToken: String) async -> Result<MIMIKMicroservice, NSError> {\\n\\n    // Establishing application bundle reference to the randomnumber_v1.tar file\\n    guard let imageTarPath = Bundle.main.path(forResource: \\\"randomnumber_v1\\\", ofType: \\\"tar\\\") else {\\n        // Tar file not found, failing with error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 404))\\n    }\\n\\n    // edge microservice deployment configuration object with example values\\n    let config = MIMIKMicroserviceConfig.init(imageName: \\\"randomnumber-v1\\\", containerName: \\\"randomnumber-v1\\\", baseApiPath: \\\"/randomnumber/v1\\\", envVariables: [:])\\n\\n    // Calling mimik Client Library method to deploy the edge microservice\\n    switch await self.edgeClient.deployMicroservice(edgeEngineAccessToken: edgeEngineAccessToken, config: config, imageTarPath: imageTarPath) {\\n    case .success(let microservice):\\n        print(\\\"Success\\\")\\n        // Deployment was successful, returning edge microservice object reference\\n        return .success(microservice)\\n    case .failure(let error):\\n        print(\\\"Error\\\", error.localizedDescription)\\n        // Deployment was unsuccessful, returning error\\n        return .failure(error)\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 1: Deploying an edge microservice\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we establish a file path to where the edge microservice is stored within the application bundle at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-8\"), \". In this example, the edge microservice is represented by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"randomnumber_v1.tar\"), \" file according to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bundle.main.path(forResource: \\\"randomnumber_v1\\\", ofType: \\\"tar\\\")\"), \" statement at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 5\"), \".\"), mdx(\"p\", null, \"Next, we create a configuration object using the function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKMicroserviceConfig.init()\"), \" at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 11\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MIMIKMicroserviceConfig.init()\"), \" describes the edge microservice deployment parameters. The example code in Listing 1 is configured with some hard-coded values as shown on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 11\"), \". In a production setting, you'd want to put these values somewhere in a configuration file.\"), mdx(\"p\", null, \"Then, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deployMicroservice()\"), \" method of the mimik Client Library at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 14\"), \" which requires the following parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"edgeEngineAccessToken\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"config\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"imageTarPath\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeEngineAccessToken\"), \" is the edgeEngine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Token\"), \" we generated earlier\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \" is a configuration object describing the edge microservice deployment parameters \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 11\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"imageTarPath\"), \" is a file path to where the edge microservice is stored within the application bundle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-8\"), \" \"), mdx(\"p\", null, \"After the call, we validate the result at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 15-23\"), \".\"), mdx(\"p\", null, \"If the deployment was successful, we get a reference object to the deployed edge microservice at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 15\"), \". You can either keep a reference to this object or get it again as needed, as described in the section titled \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#referencingthemicroservice\"\n  }, \"Referencing the microservice\"), \" below . In the last of Listing 1, we return microservice as an object at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 18\"), \".\"), mdx(\"p\", null, \"If there was an issue, we return an error at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 22\"), \".\"), mdx(\"p\", null, \"At this point we are done, the edge microservice has been successfully deployed and it is now functional.\"), mdx(\"p\", null, \"Take a moment to review the statements in the code above using these comments as your guide.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Once an edge microservice is deployed to the edgeEngine Runtime, its lifecycle gets tied to the edgeEngine Runtime, starting up and shutting down along with it.\")))), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"Each edge microservice provides a set of interfaces, allowing edge microservice developers to develop and deploy cross-platform solutions. This is because the same edge microservice can be deployed to other platforms as well.\")))), mdx(\"h1\", null, \"Referencing the microservice\"), mdx(\"p\", null, \"After edge microservice deployment, we will want to start calling its endpoints to do the work. Since the endpoint uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" communication protocols, we will need to establish a URL to reach it. There are several ways to accomplish this, but for the learning purposes of this tutorial, we will establish this URL using an edge microservice object reference. The code example below in Listing 2 shows how to do this. A detailed explanation follows the code listing.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// A valid edgeEngine Access Token is required to call this method.\\n// The async return is either a success with an array of deployed edge\\n// microservice object references, or a failure with an error\\nfunc deployedMicroservices(edgeEngineAccessToken: String) async -> Result<[MIMIKMicroservice], NSError> {\\n    \\n    // Calling mimik Client Library method to get the deployed edge microservice references\\n    switch await self.edgeClient.deployedMicroservices(edgeEngineAccessToken: edgeEngineAccessToken) {\\n    case .success(let microservices):\\n        \\n        // Guarding against the array being empty.\\n        guard !microservices.isEmpty else {\\n            print(\\\"Success, but no deployed edge microservices found\\\")\\n            // Call was successful, but there were no deployed edge microservices found. Returning the empty array\\n            return .success(microservices)\\n        }\\n        \\n        for microservice in microservices {\\n            // Attempting to establish a url to the deployed edge microservice /randomNumber endpoint\\n            guard let url = microservice.urlComponents(withEndpoint: \\\"/randomNumber\\\")?.url else {\\n                print(\\\"Error\\\")\\n                // Unable to establish the url to the deployed edge microservice endpoint\\n                continue\\n            }\\n            \\n            // Printing the url to the deployed edge microservice endpoint\\n            print(\\\"microservice url:\\\", url)\\n        }\\n        \\n        print(\\\"Success\\\")\\n        // Call was successful, returning the array of deployed edge microservice object references\\n        return .success(microservices)\\n        \\n    case .failure(let error):\\n        print(\\\"Error\\\", error.localizedDescription)\\n        // Call was unsuccessful, returning error\\n        return .failure(error)\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 2: Referencing an edge microservice\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deployedMicroservices()\"), \" method of the mimik Client Library at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 7\"), \", which requires the parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeEngineAccessToken\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeEngineAccessToken\"), \" is the edgeEngine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Token\"), \".\"), mdx(\"p\", null, \"After the call, we do result-validation checks at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 8 and 33\"), \".\"), mdx(\"p\", null, \"If the call was successful, but no edge microservices were found, we return an empty array at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 14\"), \".\\nIf there was an issue, we return an error at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 34\"), \".\"), mdx(\"p\", null, \"If all is good, we start iterating over the array of deployed edge microservice object references at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 17-27\"), \".\"), mdx(\"p\", null, \"For learning purposes of this article, while iterating, we attempt to establish a URL to an edge microservice endpoint called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/randomNumber\"), \" at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 19\"), \". For now, we just print the value to the console log at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 26\"), \". In the next section titled \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#callingthemicroservice\"\n  }, \"Calling the microservices\"), \", we will be actively capturing and using this value to make our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" call.\"), mdx(\"p\", null, \"Take a moment to review the statements in the code above using these comments as your guide.\"), mdx(\"h1\", null, \"Calling the microservice\"), mdx(\"p\", null, \"Once we have established the URL to the deployed edge microservice endpoint, we can start making \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" calls to it. The code example below in Listing 3 shows how to do this. A detailed explanation follows the code listing.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import Alamofire\\n\\n// A valid edgeEngine Access Token is required to call this method. The async return is either a success with the response value from the edge microservice endpoint, or a failure with an error\\nfunc callMicroservice(edgeEngineAccessToken: String) async -> Result<Any, NSError> {\\n    \\n    // First getting an object reference to the url of the deployed edge microservice endpoint\\n    guard case let .success(microservices) = await self.edgeClient.deployedMicroservices(edgeEngineAccessToken: accessToken),\\n          let url = microservices.first?.urlComponents(withEndpoint: \\\"/randomNumber\\\")?.url else {\\n        print(\\\"Error\\\")\\n        // Getting url was unsuccessful, returning error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 404))\\n    }\\n    \\n    // Access Token can be used, when the edge microservice endpoint requires authentication\\n    let httpHeaders = HTTPHeaders.init([\\\"Authorization\\\" : \\\"Bearer \\\\(edgeEngineAccessToken)\\\"])\\n    \\n    // Alamofire request call to the endpoint's url, with serialization of a Decodable value\\n    let dataTask = AF.request(url, headers: httpHeaders).serializingDecodable(Int.self)\\n    guard let value = try? await dataTask.value else {\\n        print(\\\"Error\\\")\\n        // Response value serializing was unsuccessful, returning error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 500))\\n    }\\n    \\n    // Response value serializing was successful, returning the value\\n    print(\\\"Success. value:\\\", value)\\n    return .success(value)\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 3: Calling an edge microservice\")), mdx(\"hr\", null), mdx(\"p\", null, \"To simplify the code, we will use an established Swift networking library called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Alamofire/Alamofire\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Alamofire\")), \" to make the call. Since the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alamofire\"), \" library is already a dependency of the mimik Client Library, it is made available to our iOS project as part of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CocoaPods\"), \" dependency manager automatically.\"), mdx(\"p\", null, \"First, we make the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alamofire\"), \" library available to our class, by importing it on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 1\"), \".\"), mdx(\"p\", null, \"Next, we get a reference to the URL of the deployed edge microservice at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 7-12\"), \". We are simplifying the example code, by simply getting a reference to the first edge microservice we receive in the array. In a production application, you'd want to do additional checks, to make sure that the correct edge microservice has been selected especially if there are multiple edge microservices deployed.\"), mdx(\"p\", null, \"Then, we setup the http headers on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 15\"), \" to pass the edgeEngine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Token\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bearer Authorization\"), \" http headers parameter.\"), mdx(\"p\", null, \"At this point, we are ready to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"request()\"), \" method of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alamofire\"), \" Library to make the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" call to the edge microservice endpoint.\"), mdx(\"p\", null, \"We set the following parameters of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"request()\"), \" method:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"url\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"headers\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" is the url to the endpoint of the deployed edge microservice. See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#referencing\"\n  }, \"here\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headers\"), \" are optional HTTP headers values that we might want to include in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" call. In our example, we include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bearer Authorization\"), \" header to demonstrate how to pass authorizations to an endpoint\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"There are other components that you might want to include in your \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"http\"), \" calls. Please see the \", mdx(\"a\", {\n    parentName: \"th\",\n    \"href\": \"https://github.com/Alamofire/Alamofire\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Alamofire\")), \" library documentation for more information.\")))), mdx(\"p\", null, \"Once the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http\"), \" call is made on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 18\"), \", we do a validation check to make sure that we get the expected response on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 19-23\"), \". In our example, we are expecting an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Int\"), \" value in the response. \"), mdx(\"p\", null, \"If there is an issue, we return an error on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 22\"), \".\"), mdx(\"p\", null, \"When all is good, and an Integer value is received, we return a success with the said value on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 27\"), \".\"), mdx(\"p\", null, \"Take a moment to review the statements in the code above using these comments as your guide.\"), mdx(\"h1\", null, \"Updating an edge microservice\"), mdx(\"p\", null, \"As an iOS developer, you might be asked to update an already deployed edge microservice. For example, when the edge microservice developer releases a new version that might include bug fixes or new features.\"), mdx(\"p\", null, \"There are two ways to update an already deployed edge microservice.\"), mdx(\"p\", null, \"You can simply re-deploy the same edge microservice from a new, updated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tar\"), \" file. You have to be careful, though, to use exactly the same configuration that was used during the initial deployment. This is so that you don't end up with two instances of the same edge microservice. (However, environment variables can change.) \"), mdx(\"p\", null, \"Instead, you can safely use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateMicroservice()\"), \" method of the mimik Client Library. Using this method guarantees that only the specifically selected edge microservice is updated.\"), mdx(\"p\", null, \"The code example below in Listing 4 shows you the recommended, safer way of updating an already deployed edge microservice. A detailed explanation follows the code example.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// A valid edgeEngine Access Token is required to call this method. The async return is either a success with an object reference to the updated edge microservice, or a failure with an error.\\nfunc updateMicroservice(edgeEngineAccessToken: String) async -> Result<MIMIKMicroservice, NSError> {\\n    \\n    // First getting an object reference to the deployed edge microservice endpoint\\n    guard case let .success(microservices) = await self.edgeClient.deployedMicroservices(edgeEngineAccessToken: accessToken),\\n          let microservice = microservices.first else {\\n        print(\\\"Error\\\")\\n        // Getting object reference was unsuccessful, returning error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 500))\\n    }\\n    \\n    // Establishing application bundle reference to the new, updated randomnumber_v2.tar file\\n    guard let imageTarPath = Bundle.main.path(forResource: \\\"randomnumber_v2\\\", ofType: \\\"tar\\\") else {\\n        print(\\\"Error\\\")\\n        // Tar file not found, returning error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 500))\\n    }\\n    \\n    // Calling mimik Client Library method to update the selected edge microservice\\n    switch await self.edgeClient.updateMicroservice(edgeEngineAccessToken: accessToken, microservice: microservice, imageTarPath: imageTarPath, envVariables: [\\\"MyKey3\\\" : \\\"MyValue3\\\"]) {\\n    case .success(let microservice):\\n        print(\\\"Success\\\")\\n        // Update was successful, returning edge microservice object reference\\n        return .success(microservice)\\n    case .failure(let error):\\n        print(\\\"Error updating microservice\\\", error.localizedDescription)\\n        // Update was unsuccessful, returning error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 500))\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 4: Updating an edge microservice\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we get an object reference to the already deployed edge microservice on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-10\"), \". We are simplifying the example code, by simply getting a reference to the first edge microservice we receive in the array. In a production application, you'd want to do additional checks, to make sure that the correct edge microservice has been selected. Especially, if there are multiple edge microservices deployed.\"), mdx(\"p\", null, \"Next, we establish a file path to where the new, updated edge microservice is stored within the application bundle at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 13-17\"), \". This example edge microservice is represented by a new, updated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"randomnumber_v2.tar\"), \" file.\"), mdx(\"p\", null, \"Then, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateMicroservice()\"), \" method of the mimik Client Library, which requires the following parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"edgeEngineAccessToken\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"microservice\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"imageTarPath\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"envVariables\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeEngineAccessToken\"), \" is the edgeEngine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Token\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microservice\"), \" is the object reference to the deployed edge microservice \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-10\"), \"in Listing 4 above.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"imageTarPath\"), \" is a file path to where the new, updated edge microservice is stored within the application bundle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 12-17\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"envVariables\"), \" are any environment variables configuration values for the edge microservice. All need to be explicitly set, every time.\"), mdx(\"p\", null, \"After the call, we validate the result at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 21-28\"), \".\"), mdx(\"p\", null, \"If the edge microservice update is successful, we get a reference object to the updated edge microservice at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 21\"), \". You can either keep a reference to this object or get it again as needed. We return this object at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 24\"), \".\"), mdx(\"p\", null, \"If there is an issue, we return an error at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 28\"), \".\"), mdx(\"p\", null, \"At this point we are done, the edge microservice has been successfully updated. \"), mdx(\"p\", null, \"Take a moment to review the statements in the code above using these comments as your guide.\"), mdx(\"h1\", null, \"Undeploying an edge microservice\"), mdx(\"p\", null, \"Sometimes there is a need to undeploy (uninstall) an edge microservice from the edgeEngine Runtime. The code example below in Listing 5 shows how to accomplish this. A detailed discussion follows the code example.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// A valid edgeEngine Access Token is required to call this method. The async return is either a success or an error.\\nfunc undeployMicroservice(edgeEngineAccessToken: String) async -> Result<Bool, NSError> {\\n    \\n    // First getting an object reference to deployed edge microservice\\n    guard case let .success(microservices) = await self.edgeClient.deployedMicroservices(edgeEngineAccessToken: edgeEngineAccessToken), let microservice = microservices.first else {\\n        print(\\\"Error\\\")\\n        // Getting object reference was unsuccessful, returning error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 500))\\n    }\\n    \\n    // Calling mimik Client Library method to undeploy the selected edge microservice\\n    switch await self.edgeClient.undeployMicroservice(edgeEngineAccessToken: accessToken, microservice: microservice) {\\n    case .success:\\n        print(\\\"Success\\\")\\n        // Undeploy was successful, returning success\\n        return .success(true)\\n    case .failure(let error):\\n        print(\\\"Error\\\", error.localizedDescription)\\n        // Undeploy was unsuccessful, returning error\\n        return .failure(NSError.init(domain: \\\"Error\\\", code: 500))\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Listing 5: Undeploying an edge microservice\")), mdx(\"hr\", null), mdx(\"p\", null, \"First, we get an object reference to the deployed edge microservice on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-9\"), \". We are simplifying the example code, by simply getting a reference to the first edge microservice we receive in the array. In a production application, you'd want to do additional checks to make sure that the correct edge microservice has been selected especially if there are multiple edge microservices deployed.\"), mdx(\"p\", null, \"Then, we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undeployMicroservice()\"), \" method of the mimik Client Library, which requires the following parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"edgeEngineAccessToken\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"microservice\"), \" \")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeEngineAccessToken\"), \" is the edgeEngine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Token\"), \".\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microservice\"), \" is the object reference to the deployed edge microservice \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 5-9\")), mdx(\"p\", null, \"After the call, we validate the result at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lines 13-20\")), mdx(\"p\", null, \"If the edge microservice undeployment is successful, we return a success at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 16\"), \". If there is an issue, we return an error at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 20\"), \".\"), mdx(\"p\", null, \"At this point we are done, the edge microservice has been successfully undeployed and is no longer functional. \"), mdx(\"p\", null, \"Take a moment to review the statements in the code above using these comments as your guide.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#objective","title":"Objective"},{"url":"#intended-readers","title":"Intended Readers"},{"url":"#what-youll-be-doing","title":"What You'll Be Doing"},{"url":"#technical-prerequisites","title":"Technical Prerequisites"},{"url":"#deploying-an-edge-microservice","title":"Deploying an edge Microservice"},{"url":"#referencing-the-microservice","title":"Referencing the microservice"},{"url":"#calling-the-microservice","title":"Calling the microservice"},{"url":"#updating-an-edge-microservice","title":"Updating an edge microservice"},{"url":"#undeploying-an-edge-microservice","title":"Undeploying an edge microservice"}]},"parent":{"relativePath":"tutorials/13-index.md"},"frontmatter":{"metaTitle":"Working with edge microservices in an iOS project","metaDescription":"Working with edge microservices in an iOS project"}},"allMdx":{"edges":[{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":{"slug":"/introduction","title":"Introduction to edgeEngine"}}},{"node":{"fields":{"slug":"/","title":"Welcome to the mimik Developer Documentation"}}},{"node":{"fields":{"slug":"/api","title":"mimik Object Models, Tools and APIs Reference"}}},{"node":{"fields":{"slug":"/faqs","title":"FAQs"}}},{"node":{"fields":{"slug":"/misc","title":"Privacy Policy and Disclaimer"}}},{"node":{"fields":{"slug":"/key-concepts","title":"Key Concepts"}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting Questions"}}},{"node":{"fields":{"slug":"/search-result","title":"Search result for"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/api/02-index","title":"Node Discovery API Reference"}}},{"node":{"fields":{"slug":"/api/03-index","title":"mDebug API Reference"}}},{"node":{"fields":{"slug":"/api/01-index","title":"Command Line Tool Reference"}}},{"node":{"fields":{"slug":"/faqs/01-faqs","title":"FAQs: Hybrid edgeCloud Platform"}}},{"node":{"fields":{"slug":"/api/04-index","title":"JSON RPC API Reference"}}},{"node":{"fields":{"slug":"/faqs/02-faqs","title":"FAQs: mimik Technology"}}},{"node":{"fields":{"slug":"/api/05-index","title":"mimik Identity Server API Reference"}}},{"node":{"fields":{"slug":"/faqs/03-faqs","title":"FAQs: mimik Deployment and Integration"}}},{"node":{"fields":{"slug":"/faqs/05-faqs","title":"FAQs: edgeEngine Device Connectivity"}}},{"node":{"fields":{"slug":"/faqs/06-faqs","title":"FAQs: edgeEngine Security"}}},{"node":{"fields":{"slug":"/faqs/04-faqs","title":"FAQs: edgeEngine JavaScript Serverless"}}},{"node":{"fields":{"slug":"/faqs/07-faqs","title":"FAQs: mimik Network Topology"}}},{"node":{"fields":{"slug":"/faqs/09-faqs","title":"FAQs: edgeEngine memory & CPU usage"}}},{"node":{"fields":{"slug":"/faqs/08-faqs","title":"FAQs: edgeEngine Network Configuration"}}},{"node":{"fields":{"slug":"/misc/01-index","title":"mimik Technology Disclaimer and Terms of Use Policy"}}},{"node":{"fields":{"slug":"/misc/02-index","title":"mimik Technology Incorporated Privacy Policy"}}},{"node":{"fields":{"slug":"/introduction/02-index","title":"What Problem Does edgeEngine Solve?"}}},{"node":{"fields":{"slug":"/introduction/01-index","title":"What Does the edgeEngine Runtime Do?"}}},{"node":{"fields":{"slug":"/introduction/03-index","title":"How Does the edgeEngine Runtime Work?"}}},{"node":{"fields":{"slug":"/introduction/04-index","title":"What Does edgeEngine Service Mesh Do?"}}},{"node":{"fields":{"slug":"/introduction/05-index","title":"What Problem Does the edgeEngine Service Mesh Solve?"}}},{"node":{"fields":{"slug":"/key-concepts/01-index","title":"Understanding the Fundamentals of the edgeEngine Runtime"}}},{"node":{"fields":{"slug":"/key-concepts/02-index","title":"Understanding edgeEngine Images and edgeEngine Containers"}}},{"node":{"fields":{"slug":"/key-concepts/03-index","title":"Understanding edgeEngine Tokens"}}},{"node":{"fields":{"slug":"/introduction/06-index","title":"How Does edgeEngine Service Mesh Work?"}}},{"node":{"fields":{"slug":"/key-concepts/04-index","title":"Understanding the Strategies for Deploying an edge Microservice"}}},{"node":{"fields":{"slug":"/key-concepts/05-index","title":"Understanding the edgeEngine Context Object"}}},{"node":{"fields":{"slug":"/key-concepts/07-index","title":"Understanding the edgeEngine Security Framework"}}},{"node":{"fields":{"slug":"/key-concepts/08-index","title":"Understanding edgeEngine Data Management"}}},{"node":{"fields":{"slug":"/key-concepts/09-index","title":"Understanding the mimik Client Library for iOS"}}},{"node":{"fields":{"slug":"/key-concepts/11-index","title":"Working with edgeEngine and WebAssembly"}}},{"node":{"fields":{"slug":"/key-concepts/10-index","title":"Understanding How to Integrate the mimik Client Library into Android Applications"}}},{"node":{"fields":{"slug":"/tutorials/01-index","title":"QuickStart"}}},{"node":{"fields":{"slug":"/tutorials/02-index","title":"Getting the edgeEngine license and Identity server values from mimik Developer Portal"}}},{"node":{"fields":{"slug":"/tutorials/03-index","title":"Installing edgeEngine and the mimik-edge-cli Tool on a Linux System or MacOS"}}},{"node":{"fields":{"slug":"/tutorials/04-index","title":"Using the mimik-edge-cli Tool to Get An Access Token"}}},{"node":{"fields":{"slug":"/tutorials/05-index","title":"Getting edgeEngine Up and Running on Raspberry Pi"}}},{"node":{"fields":{"slug":"/tutorials/06-index","title":"Creating an edge Microservice using WebAssembly"}}},{"node":{"fields":{"slug":"/tutorials/08-index","title":"Creating a Secure Network Connection using mimik Tunneling Technology"}}},{"node":{"fields":{"slug":"/tutorials/07-index","title":"Getting Up and Running with mDebug"}}},{"node":{"fields":{"slug":"/tutorials/11-index","title":"Integrating the mimik Client Library into an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/10-index","title":"Creating a Simple iOS Application that Uses an edge microservice"}}},{"node":{"fields":{"slug":"/tutorials/12-index","title":"Working with edgeEngine in an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/09-index","title":"Creating a Simple Android Application that Uses an edge microservice"}}},{"node":{"fields":{"slug":"/tutorials/13-index","title":"Working with edge microservices in an iOS project"}}},{"node":{"fields":{"slug":"/key-concepts/06-index","title":"Understanding the edgeEngine Service Mesh"}}}]}},"pageContext":{"id":"00b8533d-304e-563a-9530-01966f18f261"}},
    "staticQueryHashes": ["2619113677","320950771","3706406642","417421954"]}
{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/key-concepts/10-index",
    "result": {"data":{"site":{"siteMetadata":{"title":"mimik Developer Portal | mimik","docsLocation":"https://bitbucket.org/mimiktech/dev-portal-content/src/develop/content/"}},"mdx":{"fields":{"id":"fbfdf746-6e28-5fc1-bed1-9c12384753f1","title":"Understanding How to Integrate the mimik Client Library into Android Applications","slug":"/key-concepts/10-index"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Understanding How to Integrate the mimik Client Library into Android Applications\",\n  \"metaTitle\": \"Understanding How to Integrate the mimik Client Library into Android Applications\",\n  \"metaDescription\": \"Understanding How to Integrate the mimik Client Library into Android Applications\",\n  \"seo\": \"mimik, edge, edgeEngine, integration, client, library, android, gradle\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Objective\"), mdx(\"p\", null, \"The objective of this document is to describe the key concepts that developers need to understand in order to integrate the mimik Client Library with an Android application and then use the library in their programming activities.\"), mdx(\"h1\", null, \"Intended Readers\"), mdx(\"p\", null, \"The intended readers of this document are Android software developers and system integrators that will be using the mimik Client Library when programming an Android application.\"), mdx(\"h1\", null, \"What You Need to Know Before You Start\"), mdx(\"p\", null, \"In order to get the full benefit of this document, the intended readers should be familiar with the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The basics of the purpose and use of the the mimik \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./01-index\"\n  }, \"edgeEngine Runtime\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The basics of using an \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./03-index\"\n  }, \"Access Token\"), \" to access and work with the edgeEngine Runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The basics of programming Android applications using the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://gradle.org/\"\n  }, \"Gradle Build Tool\"))), mdx(\"h1\", null, \"What You Will Learn from This Document\"), mdx(\"p\", null, \"After reading this document you will understand:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The reason for using the mimik Client Library in your Android application\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to include the mimik Client Library as a project dependency in an Android application using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://gradle.org/\"\n  }, \"Gradle\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How the mimik Client Library is initialized for use in your Android application at runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use the mimik Client Library in your code to start and stop the edgeEngine Runtime deployed on an application's host device\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use the mimik Client Library in your code to get and save a mimik Access Token in your application at runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How use the mimik Client Library to get additional information about the edgeEngine Runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts behind using the mimik Client Library to run and access an edge microservice from within an Android application\")), mdx(\"h1\", null, \"Understanding the Purpose of the mimik Client Library\"), mdx(\"p\", null, \"The purpose of the mimik Client Library is to provide a programmatic way to work with the edgeEngine Runtime to access information about the mobile device on which the application is running as well as mobile devices running within a cluster of mobile devices that are hosting the edgeEngine Runtime. Also, the mimik Client Library allows developers to use edge microservices that are running within a particular cluster.\"), mdx(\"p\", null, \"The edgeEngine Runtime has the ability to transform a mobile device into an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.ibm.com/cloud/what-is-edge-computing\"\n  }, \"edge computing device\"), \". Edge computing is a distributed computing framework that allows independent devices such as cell phones, mobile tablets and other types of IoT devices to do computationally intensive work internally using their own computing resources. Then, when the computation is completed, the result is passed on to other devices or back to a central server. It's the difference between having a cell phone that has the capability to do facial recognition using its own computing power as opposed to having to send a photo back for facial recognition processing at a central location. The benefit is that more useful work can be done faster, in a more flexible manner, while incurring less burden on the network.\"), mdx(\"p\", null, \"Using the mimik Client Library allows developers to create applications that work with the edgeEngine Runtime to take advantage of the power and flexibility inherent in the edge computing paradigm. \"), mdx(\"h1\", null, \"Integrating the mimik Client Library using Gradle\"), mdx(\"p\", null, \"At a high level integrating the mimik Client Library for use in an Android project is a multi-phase process. These phases are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integrating the mimik Client Library using the Gradle Build Tool\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initializing the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Starting up the edgeEngine Runtime using the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using the mimik Client Library in your Android application\")), mdx(\"p\", null, \"The sections that follow will describe the various aspects of the phases described above that developers need to understand in order to work with the mimik Client Library for Android.\"), mdx(\"h1\", null, \"Adding the mimik Client Library for Android Dependency\"), mdx(\"p\", null, \"The mimik Client Library for Android is a dependency that gets included as a Maven repository. The segments that follow show an example of the declarations that developers will include in their Android project. The project* and module-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.gradle\"), \" files define the required Maven repository, and dependencies and configuration values for the library.\"), mdx(\"p\", null, \"The project-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"settings.gradle\"), \" file declares the repositories that will be used by the project. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 4\"), \" specifies the location of the mimik Maven repository.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"dependencyResolutionManagement {\\n    repositories {\\n        maven {\\n            url \\\"https://s3-us-west-2.amazonaws.com/mimik-android-repo\\\"\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"The module-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.gradle\"), \" file declares the dependency for the module on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 7\"), \", and defines configuration values for the mimik Client Library on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 3\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"android {\\n    defaultConfig {\\n        manifestPlaceholders = [\\\"appAuthRedirectScheme\\\": \\\"\\\"] // Placeholder, for use with CustomTab authentication methods\\n    }\\n}\\ndependencies {\\n    implementation 'com.mimik.edgesdk-android-client:edgemobileclient-core:0.3.8.3'\\n}\\n\")), mdx(\"h1\", null, \"Enable Cleartext Communication\"), mdx(\"p\", null, \"edgeEngine hosts APIs on the local network interface. To allow this type of communication on Android devices, add the following property to the application in the module \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AndroidManifest.xml\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<manifest>\\n    <application\\n        android:usesCleartextTraffic=\\\"true\\\">\\n    </application>\\n</manifest>\\n\")), mdx(\"h1\", null, \"Initializing the mimik Client Library\"), mdx(\"p\", null, \"In order to get the mimik Client Library up and running in an Android project, a developer needs to initialize it. Initialization involves importing a reference to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EdgeMobileClient\"), \"  and then creating an instance variable using the constructor.\"), mdx(\"p\", null, \"The code listed below shows an example of the code a developer writes to create an instance of the mimik Client Library. Notice the use of the  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EdgeMobileClient(Context context, EdgeConfig edgeConfig)\"), \" constructor at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 2.\"), \" The default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EdgeConfig()\"), \" constructor automatically selects default parameters. This will have the edgeEngine Runtime host URLs using port 8083, and use the default license required to work with the edgeEngine Runtime.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"EdgeMobileClient edgeMobileClient =\\n        new EdgeMobileClient(getContext(), new EdgeConfig());\\n\")), mdx(\"p\", null, \"You now have an initialized mimik Client Library in your Android application.\"), mdx(\"h1\", null, \"Starting the edgeEngine Runtime\"), mdx(\"p\", null, \"In order to do work using the mimik Client Library APIs, the initialized edgeEngine Runtime needs to be running. To start up the edgeEngine Runtime using the mimik Client Library, add the following code to your Android project. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"if (edgeMobileClient.startEdge()) { // Start edgeEngine runtime\\n    // edgeEngine started successfully\\n    Log.d(\\\"edgeEngine\\\", \\\"Started successfully\\\");\\n} else {\\n    // error with edgeEngine startup\\n    Log.d(\\\"edgeEngine\\\", \\\"Failed to start\\\");\\n}\\n\")), mdx(\"h1\", null, \"Authorizing Access to the edgeEngine Runtime\"), mdx(\"p\", null, \"Most of mimik Client Library APIs require an Access Token in order to be operational. Developers use the mimik Client Library to create an Access Token. The Access Token is based on the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Developer ID Token\"), \" they generated when creating their account in the mimik Developer Portal.  The following describes the process of generating and saving an Access Token using the mimik Client Library.\"), mdx(\"h2\", null, \"Getting the Developer ID Token from the mimik Developer Portal.\"), mdx(\"p\", null, \"Generating the Access Token that's used to work with various API within the mimik Client Library requires that the develop have a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Developer ID Token\"), \" on hand. Developers get a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Developer ID Token\"), \" from the mimik Developer Portal as shown in the illustration below.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"../images/key-concepts/set-id-token-sm-b.png\",\n    \"alt\": \"Developer ID Token\"\n  })), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Developer ID Token\"), \" is generated from within the particular mimik project that's registered on the mimik Developer Portal.\"), mdx(\"h2\", null, \"Generating the Access Token\"), mdx(\"p\", null, \"Once developers have a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Developer ID Token\"), \" in hand, they'll use it in code with the instance of the mimik Client Library in order to generate an Access Token. \"), mdx(\"p\", null, \"The segment below shows code that a developer uses in an Android application to generate an Access Token.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String developerIdToken = <DEVELOPER_ID_TOKEN>;\\nString clientId = <CLIENT_ID>;\\nString authorizationRootUri = \\\"https://devconsole-mid.mimik.com\\\"; // This is the default authorization URI\\n\\nDeveloperTokenLoginConfig config = new DeveloperTokenLoginConfig();\\nconfig.setClientId(clientId);\\nconfig.setAuthorizationRootUri(authorizationRootUri);\\nconfig.setDeveloperToken(developerIdToken);\\nedgeMobileClient.loginWithDeveloperToken(this, config, new EdgeResponseHandler() {\\n    @Override\\n    public void onError(EdgeRequestError edgeRequestError) {\\n        Log.d(\\\"edgeEngine\\\", \\\"Failed to generate access token \\\" + edgeRequestError.getErrorMessage());\\n    }\\n\\n    @Override\\n    public void onResponse(EdgeRequestResponse edgeRequestResponse) {\\n        String accessToken = ((AuthResponse)edgeRequestResponse).getAccessToken();\\n        Log.d(\\\"edgeEngine\\\", \\\"Got access token \\\" + accessToken);\\n    }\\n});\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<DEVELOPER_ID_TOKEN>\"), \" is the Developer ID Token the developer retrieved from the mimik Developer Portal\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CLIENT_ID>\"), \" is the Client ID the developer retrieved from the mimik Developer Portal\")), mdx(\"p\", null, \"Notice that the Access Token is the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accessToken\"), \" as set at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 17\"), \" in the code above.\"), mdx(\"h2\", null, \"Retrieving the Access Token\"), mdx(\"p\", null, \"The mimik Client Library saves the registered access token automatically. The access token can be retrieved using the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getCombinedAccessTokens()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"CombinedAuthResponse savedTokens = mEdgeClient.getCombinedAccessTokens();\\nString storedAccessToken = savedTokens.getMimikTokens().getAccessToken();\\n\")), mdx(\"h1\", null, \"Stopping down the edgeEngine Runtime using the mimik Client Library\"), mdx(\"p\", null, \"To shut down the edgeEngine Runtime, developers add the following code to their Android project:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"edgeMobileClient.stopEdge();\\nLog.d(\\\"edgeEngine\\\", \\\"Stopped\\\");\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Please note that due to the nature of edgeEngine shutdown process design this call is intentionally synchronous, main thread blocking API.\")), mdx(\"h1\", null, \"Getting additional Information from the edgeEngine Runtime\"), mdx(\"p\", null, \"The mimik Client Library provides a number of API methods that return information about the edgeEngine Runtime. The segment below show an examples of some of the information a developer can get using the mimik Client Library API.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"EdgeInfoResponse response = edgeMobileClient.getInfo();\\nLog.d(\\\"edgeEngine\\\", \\\"Node ID \\\" + response.getNodeId());\\n\")), mdx(\"h1\", null, \"Deploying an edge microservice\"), mdx(\"p\", null, \"Developers can use the mimik Client Library to deploy an edge microservice that's encapsulated in a pre-existing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tar\"), \" file.\"), mdx(\"p\", null, \"Sometimes the edge microservice \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tar\"), \" file will be stored in a source code repository for immediate download. Other times that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tar\"), \" file will need to be built from scratch using the source code for the edge microservice. It all depends on the build and deployment policies of the given organization. To learn the details of building an edge microservice into a deployable edge Image \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tar\"), \" file, read \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Understanding the Strategies for Deploying an edge Microservice\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../key-concepts/04-index#deployingamicroserviceonalinuxcomputer\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"The segment below shows the code a developer can use to deploy a microservice that is encapsulated in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tar\"), \" file fictitiously named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microservice.tar\"), \" and stored as a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.android.com/guide/topics/resources/providing-resources#ResourceTypes\"\n  }, \"raw resource\"), \" in the module. Notice the use of the mimik Client Library API method, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mimikClientLibrary.deployMicroservice()\"), \" at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 6\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String accessToken = <ACCESS_TOKEN>;\\nInputStream microserviceResource = getResources().openRawResource(R.raw.microservice);\\n\\n// Create microservice deployment configuration, dependent\\n// on microservice implementation\\nMicroserviceDeploymentConfig config = new MicroserviceDeploymentConfig();\\n\\n// Set the name that will represent the microservice\\nconfig.setName(\\\"microservice\\\");\\n\\n// Set the InputStream of the edge microservice\\nconfig.setResourceStream(microserviceResource);\\n\\n// Set the filename that by which the edge client will identify\\n// the microservice internally. This filename is associated internally\\n// with the resource stream initialized above\\nconfig.setFilename(\\\"microservice.tar\\\");\\n\\n// Declare the URI by  which the application code will access\\n// the microservice\\nconfig.setApiRootUri(Uri.parse(\\\"/microservice/v1\\\"));\\n\\n// Deploy edge microservice using the client library instance variable\\nMicroserviceDeploymentStatus status =\\n        edgeMobileClient.deployEdgeMicroservice(accessToken, config);\\nif (status.error != null) {\\n    // Display microservice deployment error\\n    Log.d(\\\"edgeEngine\\\", \\\"Failed to deploy microservice! \\\" + status.error.getMessage());\\n} else {\\n    // Store the microservice API root URI\\n    String microserviceRoot = status.response.getContainer().getApiRootUri().toString();\\n    // Display a message indicating a successful microservice deployment\\n    Log.d(\\\"edgeEngine\\\", \\\"Successfully deployed microservice!\\\");\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<ACCESS_TOKEN>\"), \" is the Access Token the developer generated previously using the mimik Client Library\")), mdx(\"p\", null, \"Notice that the microservice API root URI is stored as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microserviceRoot\"), \", set at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Line 31\"), \" in the code above.\"), mdx(\"h1\", null, \"Uninstalling an edge microservice deployment\"), mdx(\"p\", null, \"The segment below shows the code a developer can use to undeploy (uninstall) an edge microservice from the edgeEngine Runtime running on an Android device. Add the following code to your Android project.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String accessToken = <ACCESS_TOKEN>;\\n\\nMicroserviceDeploymentConfig config = new MicroserviceDeploymentConfig();\\n// Declare the name of the microservice to be uninstalled\\nconfig.setName(\\\"microservice\\\");\\nMicroserviceDeploymentStatus status =\\n        edgeMobileClient.removeEdgeMicroservice(accessToken, config);\\nif (status.error != null) {\\n    // Display microservice uninstall error\\n    Log.d(\\\"edgeEngine\\\", \\\"Failed to uninstall microservice! \\\" + status.error.getMessage());\\n} else {\\n    // Display microservice uninstall success\\n    Log.d(\\\"edgeEngine\\\", \\\"Successfully uninstalled microservice!\\\");\\n}\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<ACCESS_TOKEN>\"), \" is the Access Token the developer generated previously using the mimik Client Library\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"th\"\n  }, \"NOTE:\"), mdx(\"br\", null), \"The edgeEngine Runtime needs to be up and running for these API calls to work.\")))), mdx(\"h1\", null, \"Calling an edge microservice\"), mdx(\"p\", null, \"Once an edge microservice is deployed with the Android application, a developer can work with it using the mimik Client Library. \"), mdx(\"p\", null, \"The code segment below shows an example of how to access and use an edge microservice programmatically using the mimik Client Library. HTTP requests are performed using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/\"\n  }, \"OkHttpClient\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String randomNumberRoot = <MICROSERVICE_ROOT_URI>;\\nString microserviceApiEndpoint = <MICROSERVICE_API_ENDPOINT>;\\n\\n// Construct an API request for the edge microservice\\nOkHttpClient client = new OkHttpClient();\\nRequest request = new Request.Builder()\\n        .url(String.format(\\n                \\\"http://127.0.0.1:%d%s/\\\" + microserviceApiEndpoint,\\n                // use the client to get the default localhost port\\n                edgeMobileClient.getEdgePort(),\\n                randomNumberRoot)) // root URI determined by microservice deployment\\n        .build();\\nclient.newCall(request).enqueue(new Callback() {\\n    @Override\\n    public void onFailure(\\n            @NotNull Call call,\\n            @NotNull IOException e) {\\n        // Display microservice request error\\n        e.printStackTrace();\\n        Log.d(\\\"edgeEngine\\\", \\\"Failed to communicate with microservice! \\\" + e.getMessage());\\n    }\\n\\n    @Override\\n    public void onResponse(\\n            @NotNull Call call,\\n            @NotNull final Response response) throws IOException {\\n        if (!response.isSuccessful()) {\\n            // Display microservice unknown error\\n            Log.d(\\\"edgeEngine\\\", \\\"Microservice returned unexpected code! \\\" + response);\\n            });\\n        } else {\\n            // Display microservice response\\n            Log.d(\\\"edgeEngine\\\", \\\"Microservice returned \\\" + response.body().string());\\n        }\\n    }\\n});\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WHERE\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<MICROSERVICE_ROOT_URI>\"), \" is the microservice API root URI acquired previously\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<MICROSERVICE_API_ENDPOINT>\"), \" is microservice API endpoint defined by the microservice\")), mdx(\"h1\", null, \"Review\"), mdx(\"p\", null, \"In this document you learned the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The purpose of the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The operational concept behind integrating the mimik Client Library with Android application code using the Gradle Build Tool and enabling cleartext traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts and code behind programmatically initializing the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts and code behind starting and stopping an instance of the edgeEngine Runtime using the mimik Client Library \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts and code behind using an Access Token in code to work with the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts and code needed to get additional runtime information using the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts and code needed to deploy an edge microservice using the using the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts and code needed to uninstall (undeploy) a microservice using the using the mimik Client Library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concepts and code needed to work with a deployed edge microservice using the mimik Client Library\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#objective","title":"Objective"},{"url":"#intended-readers","title":"Intended Readers"},{"url":"#what-you-need-to-know-before-you-start","title":"What You Need to Know Before You Start"},{"url":"#what-you-will-learn-from-this-document","title":"What You Will Learn from This Document"},{"url":"#understanding-the-purpose-of-the-mimik-client-library","title":"Understanding the Purpose of the mimik Client Library"},{"url":"#integrating-the-mimik-client-library-using-gradle","title":"Integrating the mimik Client Library using Gradle"},{"url":"#adding-the-mimik-client-library-for-android-dependency","title":"Adding the mimik Client Library for Android Dependency"},{"url":"#enable-cleartext-communication","title":"Enable Cleartext Communication"},{"url":"#initializing-the-mimik-client-library","title":"Initializing the mimik Client Library"},{"url":"#starting-the-edgeengine-runtime","title":"Starting the edgeEngine Runtime"},{"url":"#authorizing-access-to-the-edgeengine-runtime","title":"Authorizing Access to the edgeEngine Runtime","items":[{"url":"#getting-the-developer-id-token-from-the-mimik-developer-portal","title":"Getting the Developer ID Token from the mimik Developer Portal."},{"url":"#generating-the-access-token","title":"Generating the Access Token"},{"url":"#retrieving-the-access-token","title":"Retrieving the Access Token"}]},{"url":"#stopping-down-the-edgeengine-runtime-using-the-mimik-client-library","title":"Stopping down the edgeEngine Runtime using the mimik Client Library"},{"url":"#getting-additional-information-from-the-edgeengine-runtime","title":"Getting additional Information from the edgeEngine Runtime"},{"url":"#deploying-an-edge-microservice","title":"Deploying an edge microservice"},{"url":"#uninstalling-an-edge-microservice-deployment","title":"Uninstalling an edge microservice deployment"},{"url":"#calling-an-edge-microservice","title":"Calling an edge microservice"},{"url":"#review","title":"Review"}]},"parent":{"relativePath":"key-concepts/10-index.md"},"frontmatter":{"metaTitle":"Understanding How to Integrate the mimik Client Library into Android Applications","metaDescription":"Understanding How to Integrate the mimik Client Library into Android Applications"}},"allMdx":{"edges":[{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":null}},{"node":{"fields":{"slug":"/","title":"Welcome to the mimik Developer Documentation"}}},{"node":{"fields":{"slug":"/faqs","title":"FAQs"}}},{"node":{"fields":{"slug":"/api","title":"mimik Object Models, Tools and APIs Reference"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction to edgeEngine"}}},{"node":{"fields":{"slug":"/key-concepts","title":"Key Concepts"}}},{"node":{"fields":{"slug":"/misc","title":"Privacy Policy and Disclaimer"}}},{"node":{"fields":{"slug":"/search-result","title":"Search result for"}}},{"node":{"fields":{"slug":"/troubleshooting","title":"Troubleshooting Questions"}}},{"node":{"fields":{"slug":"/api/02-index","title":"Node Discovery API Reference"}}},{"node":{"fields":{"slug":"/api/03-index","title":"mDebug API Reference"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/api/01-index","title":"Command Line Tool Reference"}}},{"node":{"fields":{"slug":"/api/04-index","title":"JSON RPC API Reference"}}},{"node":{"fields":{"slug":"/api/05-index","title":"mimik Identity Server API Reference"}}},{"node":{"fields":{"slug":"/faqs/01-faqs","title":"FAQs: Hybrid edgeCloud Platform"}}},{"node":{"fields":{"slug":"/faqs/02-faqs","title":"FAQs: mimik Technology"}}},{"node":{"fields":{"slug":"/faqs/03-faqs","title":"FAQs: mimik Deployment and Integration"}}},{"node":{"fields":{"slug":"/faqs/06-faqs","title":"FAQs: edgeEngine Security"}}},{"node":{"fields":{"slug":"/faqs/04-faqs","title":"FAQs: edgeEngine JavaScript Serverless"}}},{"node":{"fields":{"slug":"/faqs/05-faqs","title":"FAQs: edgeEngine Device Connectivity"}}},{"node":{"fields":{"slug":"/introduction/01-index","title":"What Does the edgeEngine Runtime Do?"}}},{"node":{"fields":{"slug":"/introduction/02-index","title":"What Problem Does edgeEngine Solve?"}}},{"node":{"fields":{"slug":"/faqs/07-faqs","title":"FAQs: mimik Network Topology"}}},{"node":{"fields":{"slug":"/introduction/03-index","title":"How Does the edgeEngine Runtime Work?"}}},{"node":{"fields":{"slug":"/introduction/04-index","title":"What Does edgeEngine Service Mesh Do?"}}},{"node":{"fields":{"slug":"/introduction/05-index","title":"What Problem Does the edgeEngine Service Mesh Solve?"}}},{"node":{"fields":{"slug":"/introduction/06-index","title":"How Does edgeEngine Service Mesh Work?"}}},{"node":{"fields":{"slug":"/faqs/09-faqs","title":"FAQs: edgeEngine memory & CPU usage"}}},{"node":{"fields":{"slug":"/faqs/08-faqs","title":"FAQs: edgeEngine Network Configuration"}}},{"node":{"fields":{"slug":"/key-concepts/01-index","title":"Understanding the Fundamentals of the edgeEngine Runtime"}}},{"node":{"fields":{"slug":"/key-concepts/02-index","title":"Understanding edgeEngine Images and edgeEngine Containers"}}},{"node":{"fields":{"slug":"/key-concepts/03-index","title":"Understanding edgeEngine Tokens"}}},{"node":{"fields":{"slug":"/key-concepts/04-index","title":"Understanding the Strategies for Deploying an edge Microservice"}}},{"node":{"fields":{"slug":"/key-concepts/07-index","title":"Understanding the edgeEngine Security Framework"}}},{"node":{"fields":{"slug":"/key-concepts/08-index","title":"Understanding edgeEngine Data Management"}}},{"node":{"fields":{"slug":"/key-concepts/09-index","title":"Understanding the mimik Client Library for iOS"}}},{"node":{"fields":{"slug":"/key-concepts/05-index","title":"Understanding the edgeEngine Context Object"}}},{"node":{"fields":{"slug":"/misc/01-index","title":"mimik Technology Disclaimer and Terms of Use Policy"}}},{"node":{"fields":{"slug":"/misc/02-index","title":"mimik Technology Incorporated Privacy Policy"}}},{"node":{"fields":{"slug":"/key-concepts/10-index","title":"Understanding How to Integrate the mimik Client Library into Android Applications"}}},{"node":{"fields":{"slug":"/key-concepts/11-index","title":"Working with edgeEngine and WebAssembly"}}},{"node":{"fields":{"slug":"/tutorials/02-index","title":"Getting the edgeEngine license and Identity server values from mimik Developer Portal"}}},{"node":{"fields":{"slug":"/tutorials/03-index","title":"Installing edgeEngine and the mimik-edge-cli Tool on a Linux System or MacOS"}}},{"node":{"fields":{"slug":"/tutorials/04-index","title":"Using the mimik-edge-cli Tool to Get An Access Token"}}},{"node":{"fields":{"slug":"/tutorials/06-index","title":"Creating an edge Microservice using WebAssembly"}}},{"node":{"fields":{"slug":"/tutorials/08-index","title":"Creating a Secure Network Connection using mimik Tunneling Technology"}}},{"node":{"fields":{"slug":"/tutorials/01-index","title":"QuickStart"}}},{"node":{"fields":{"slug":"/tutorials/05-index","title":"Getting edgeEngine Up and Running on Raspberry Pi"}}},{"node":{"fields":{"slug":"/tutorials/07-index","title":"Getting Up and Running with mDebug"}}},{"node":{"fields":{"slug":"/tutorials/12-index","title":"Working with edgeEngine in an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/11-index","title":"Integrating the mimik Client Library into an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/13-index","title":"Working with edge microservices in an iOS project"}}},{"node":{"fields":{"slug":"/tutorials/10-index","title":"Creating a Simple iOS Application that Uses an edge microservice"}}},{"node":{"fields":{"slug":"/tutorials/09-index","title":"Creating a Simple Android Application that Uses an edge microservice"}}},{"node":{"fields":{"slug":"/key-concepts/06-index","title":"Understanding the edgeEngine Service Mesh"}}}]}},"pageContext":{"id":"fbfdf746-6e28-5fc1-bed1-9c12384753f1"}},
    "staticQueryHashes": ["2619113677","320950771","3706406642","417421954"]}